{
	"info": {
		"_postman_id": "7e6b2509-3e58-45f0-849c-e8981694503f",
		"name": "Academy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25335105",
		"_collection_link": "https://galactic-station-58601.postman.co/workspace/Qa.CodersAcademy---PROJETO~3ecb14f6-fdd7-4874-ac7b-d9f51c84429d/collection/25335105-7e6b2509-3e58-45f0-849c-e8981694503f?action=share&source=collection_link&creator=25335105"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "Login - Admin [token]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"Token\", JSON.parse(responseBody).token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{MailAdmin}}\",\r\n  \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url swagger}}/api/login/",
							"host": [
								"{{url swagger}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Users [POST]",
					"item": [
						{
							"name": "Register - New User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"//FullName\r",
											"pm.test(\"Verify the full name\", function () {\r",
											"    //Realiza a comparação entre o valor da variável de ambiente \"FullName\" e o nome completo do usuário na resposta da requisição.\r",
											"    pm.expect(pm.environment.get(\"FullName\")).to.eql(JSON.parse(responseBody).user.fullName);\r",
											"    //A asserção acima verifica se os valores são estritamente iguais.\r",
											"    });\r",
											"\r",
											"\r",
											"//Mail\r",
											"pm.test(\"check Mail is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"Mail\")).to.eql(JSON.parse(responseBody).user.mail)\r",
											"});\r",
											"\r",
											"\r",
											"//Password \r",
											"// validação 8 a 12 caracteres\r",
											"pm.test(\"check length Senha\", function () {\r",
											"    pm.expect(pm.variables.get(\"Password\").length).to.be.within(8,12);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//CPF\r",
											"pm.test(\"Check cpf is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"CPFUser\")).to.eql(JSON.parse(responseBody).user.cpf)\r",
											"});\r",
											"\r",
											"\r",
											"//IdUser\r",
											"pm.environment.set(\"IdUser\", JSON.parse(responseBody).user._id);\r",
											"\r",
											"\r",
											"    //Mensagem de retorno\r",
											"   pm.test(\"Verify the message\", function() {\r",
											"   pm.environment.set(\"Message\", `Olá ${pm.environment.get(\"FullName\")} cadastro realizado com sucesso`)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"\r",
											"function mail () {\r",
											"    const firtsNameWithAccents = pm.variables.get(\"FirstName\");\r",
											"    const firstNameWithoutAccents = removeAccents(firtsNameWithAccents);\r",
											"\r",
											"    pm.environment.set(\r",
											"        \"Mail\",\r",
											"        pm.variables.replaceIn('{{$guid}}') + \"-\" + firstNameWithoutAccents +\r",
											"            \"@qacoders-treinamento.com\"\r",
											"    );\r",
											"}\r",
											"\r",
											"mail ();\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - New User - token user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Token\r",
											"pm.test(\"Verify token is true\", function () {\r",
											"    pm.expect(JSON.parse(responseBody)).to.have.property(\"token\");\r",
											" });   \r",
											"\r",
											"pm.environment.set(\"TokenUser\", JSON.parse(responseBody).token)\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/login/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Tests Full Name",
					"item": [
						{
							"name": "Register - New User - Sucess case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"//FullName\r",
											"pm.test(\"Verify the full name\", function () {\r",
											"    //Realiza a comparação entre o valor da variável de ambiente \"FullName\" e o nome completo do usuário na resposta da requisição.\r",
											"    pm.expect(pm.environment.get(\"FullName\")).to.eql(JSON.parse(responseBody).user.fullName);\r",
											"    //A asserção acima verifica se os valores são estritamente iguais.\r",
											"    });\r",
											"\r",
											"\r",
											"//Mail\r",
											"pm.test(\"check Mail is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"Mail\")).to.eql(JSON.parse(responseBody).user.mail)\r",
											"});\r",
											"\r",
											"\r",
											"//Password \r",
											"// validação 8 a 12 caracteres\r",
											"pm.test(\"check length Senha\", function () {\r",
											"    pm.expect(pm.variables.get(\"Password\").length).to.be.within(8,12);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//CPF\r",
											"pm.test(\"Check cpf is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"CPFUser\")).to.eql(JSON.parse(responseBody).user.cpf)\r",
											"});\r",
											"\r",
											"\r",
											"//IdUser\r",
											"pm.environment.set(\"IdUser\", JSON.parse(responseBody).user._id);\r",
											"\r",
											"\r",
											"    //Mensagem de retorno\r",
											"   pm.test(\"Verify the message\", function() {\r",
											"   pm.environment.set(\"Message\", `Olá ${pm.environment.get(\"FullName\")} cadastro realizado com sucesso`)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"\r",
											"function mail () {\r",
											"    const firtsNameWithAccents = pm.variables.get(\"FirstName\");\r",
											"    const firstNameWithoutAccents = removeAccents(firtsNameWithAccents);\r",
											"\r",
											"    pm.environment.set(\r",
											"        \"Mail\",\r",
											"        pm.variables.replaceIn('{{$guid}}') + \"-\" + firstNameWithoutAccents +\r",
											"            \"@qacoders-treinamento.com\"\r",
											"    );\r",
											"}\r",
											"\r",
											"mail ();\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Full Name Requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Obrigatório\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo nome completo é obrigatório.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName\r",
											"pm.environment.set(\"FullName\",\"\")\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Exced 100 caracters [Manual]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//FullName Deve conter no máximo 100 caracteres\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O nome completo deve ter no máximo 100 caracteres.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Full Name: Inserido Manualmente.\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Ana Francisca de Macedo Laura Ian Willian de Fernandes Filho Christie Luara Carrara de Iglesias Ferminiano Evandro Domingues dos Pinhais Berenice Ávila Mara Balestero de Cortês Eduarda Delgado Paz Eduardo Murilo\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Exced 100 caracters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Deve conter no máximo 100 caracteres\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O nome completo deve ter no máximo 100 caracteres.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName com mais de 100 caracteres\r",
											"function generateName() {\r",
											"    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    var name = '';\r",
											"    for (var i = 0; i < 101; i++) {\r",
											"        name += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    }\r",
											"    return name;\r",
											"}\r",
											" \r",
											"pm.environment.set(\"FullName\", generateName());\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Two Words [Manual]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Deve conter nome e sobrenome\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo deve conter nome e sobrenome.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName contendo apenas 01 nome.\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Paola \",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Two Words",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Deve conter nome e sobrenome\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"Informe o Nome e Sobrenome\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName contendo apenas 01 nome.\r",
											"function firstName(){\r",
											"    \r",
											"    var firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"    \r",
											"    var lastName = [\"\"];\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Just Letters [Manual]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Deve conter apenas letras\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo deve conter nome e sobrenome.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName deve conter apenas letras\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Paola Mun5iz@ \",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Just Letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"\r",
											"pm.test.skip(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"\r",
											"//FullName Deve conter apenas letras\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O nome completo não deve ter números.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FullName com letras e números\r",
											"\r",
											"function firstName(){\r",
											"    \r",
											"    var firstName = [ \"Maria1\",\"João2\",\"Ana3\",\"Pedro4\",\"Carla5\",\"Lucas6\",\"Mariana7\",\"Paulo8\",\"Camila9\",\"Rafael0\"];\r",
											"\r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"    \r",
											"    var lastName = [\"Silva1\",\"Santos2\",\"Oliveira3\",\"Souza4\",\"Rodrigues5\",\"Almeida6\",\"Costa7\",\"Pereira8\",\"Carvalho9\",\"Ferreira0\",\"Gomes*\",\"Martins@\"];\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"}\r",
											"\r",
											"//Poderia usar essa função também para o FullName:\r",
											"//function generateName() {\r",
											"    //var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"    //var name = '';\r",
											"    //for (var i = 0; i < 101; i++) {\r",
											"        //name += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    //}\r",
											"    //return name;\r",
											"//}\r",
											" \r",
											"//pm.environment.set(\"FullName\", generateName());\r",
											"\r",
											"\r",
											"//Mail\r",
											"function mail () {\r",
											"    pm.environment.set(\"Mail\", pm.variables.replaceIn('{{$guid}}')+ \"@qacoders-treinamento.com\");\r",
											"}\r",
											"mail()\r",
											"\r",
											"//CPFUser\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests Email",
					"item": [
						{
							"name": "Register - New User - Email-  Sucess case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"//FullName\r",
											"pm.test(\"Verify the full name\", function () {\r",
											"    //Realiza a comparação entre o valor da variável de ambiente \"FullName\" e o nome completo do usuário na resposta da requisição.\r",
											"    pm.expect(pm.environment.get(\"FullName\")).to.eql(JSON.parse(responseBody).user.fullName);\r",
											"    //A asserção acima verifica se os valores são estritamente iguais.\r",
											"    });\r",
											"\r",
											"\r",
											"//Mail\r",
											"pm.test(\"check Mail is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"Mail\")).to.eql(JSON.parse(responseBody).user.mail)\r",
											"});\r",
											"\r",
											"\r",
											"//Password \r",
											"// validação 8 a 12 caracteres\r",
											"pm.test(\"check length Senha\", function () {\r",
											"    pm.expect(pm.variables.get(\"Password\").length).to.be.within(8,12);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//CPF\r",
											"pm.test(\"Check cpf is True\", function () {\r",
											"    pm.expect(pm.variables.get(\"CPFUser\")).to.eql(JSON.parse(responseBody).user.cpf)\r",
											"});\r",
											"\r",
											"\r",
											"//IdUser\r",
											"pm.environment.set(\"IdUser\", JSON.parse(responseBody).user._id);\r",
											"\r",
											"\r",
											"    //Mensagem de retorno\r",
											"   pm.test(\"Verify the message\", function() {\r",
											"   pm.environment.set(\"Message\", `Olá ${pm.environment.get(\"FullName\")} cadastro realizado com sucesso`)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"\r",
											"function mail () {\r",
											"    const firtsNameWithAccents = pm.variables.get(\"FirstName\");\r",
											"    const firstNameWithoutAccents = removeAccents(firtsNameWithAccents);\r",
											"\r",
											"    pm.environment.set(\r",
											"        \"Mail\",\r",
											"        pm.variables.replaceIn('{{$guid}}') + \"-\" + firstNameWithoutAccents +\r",
											"            \"@qacoders-treinamento.com\"\r",
											"    );\r",
											"}\r",
											"\r",
											"mail ();\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Email-  Requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Email é obrigatório\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo e-mail é obrigatório.\",).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"    pm.environment.set(\"Mail\", \"\")\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New User - Email-  Valid Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Email é obrigatório\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"   \r",
											"function mail () {\r",
											"    const firtsNameWithAccents = pm.variables.get(\"FirstName\");\r",
											"    const firstNameWithoutAccents = removeAccents(firtsNameWithAccents);\r",
											"\r",
											"    pm.environment.set(\r",
											"        \"Mail\",\r",
											"        pm.variables.replaceIn('{{$guid}}') + \"-\" + firstNameWithoutAccents +\r",
											"            \"@qacoders-treinamento\"    //alterei o formato válido, tirando .com\r",
											"    );\r",
											"}\r",
											"\r",
											"mail ();\r",
											"\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "1- Register - New User - Email-  No Space",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status Code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Email não pode ter espaço no nome e no domínio\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Nome completo\r",
											"\r",
											"function firstName(){\r",
											"\t\r",
											"\tvar firstName = [ \"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];\r",
											"\r",
											"\tvar randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\", firstName());\r",
											"\r",
											"function lastName(){\r",
											"\t\r",
											"\tvar lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];\r",
											"\r",
											"\tvar randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"\r",
											"\treturn randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastName\", lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\", pm.variables.get(\"FirstName\")+ \" \" +pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Mail\r",
											"   \r",
											"function mail () {\r",
											"    const firtsNameWithAccents = pm.variables.get(\"FirstName\");\r",
											"    const firstNameWithoutAccents = removeAccents(firtsNameWithAccents);\r",
											"\r",
											"    pm.environment.set(\r",
											"        \"Mail\",\r",
											"        pm.variables.replaceIn('{{$guid}}') + \"-\" + firstNameWithoutAccents +\r",
											"            \"@ qacoders-treinamento.com\"    //Deixei um espaço no domínio.\r",
											"    );\r",
											"}\r",
											"\r",
											"mail ();\r",
											"\r",
											"\r",
											"\r",
											"//CPF\r",
											"\r",
											"function generateCPF() {\r",
											"  const randomDigit = () => Math.floor(Math.random() * 10);\r",
											"  \r",
											"  // Gere os 9 primeiros dígitos do CPF\r",
											"  const cpfDigits = Array.from({ length: 9 }, randomDigit);\r",
											"  \r",
											"  // Calcule o primeiro dígito verificador\r",
											"  let sum = 0;\r",
											"  for (let i = 10; i > 1; i--) {\r",
											"    sum += cpfDigits[10 - i] * i;\r",
											"  }\r",
											"  const firstVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(firstVerifierDigit === 10 ? 0 : firstVerifierDigit);\r",
											"  \r",
											"  // Calcule o segundo dígito verificador\r",
											"  sum = 0;\r",
											"  for (let i = 11; i > 1; i--) {\r",
											"    sum += cpfDigits[11 - i] * i;\r",
											"  }\r",
											"  const secondVerifierDigit = (sum * 10) % 11;\r",
											"  cpfDigits.push(secondVerifierDigit === 10 ? 0 : secondVerifierDigit);\r",
											"  \r",
											"  return cpfDigits.join('');\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPFUser\", generateCPF());\r",
											"\r",
											"\r",
											"//Password\r",
											"// Função para gerar uma senha aleatória\r",
											"function gerarSenha() {\r",
											"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"  const comprimentoMinimo = 8;\r",
											"  const comprimentoMaximo = 12;\r",
											"  \r",
											"  let senhaArray = [];\r",
											"\r",
											"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial\r",
											"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo\r",
											"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo\r",
											"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número\r",
											"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial\r",
											"\r",
											"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"\r",
											"  for (let i = 0; i < comprimentoRestante; i++) {\r",
											"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);\r",
											"  }\r",
											"\r",
											"  return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											"\r",
											"// Função para embaralhar uma string\r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"\r",
											"pm.environment.set(\"Password\", gerarSenha());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPFUser}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/user/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "New Company [POST]",
					"item": [
						{
							"name": "Register - New Company - Sucess Case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Corporate Name/Nome da Empresa\r",
											" pm.test(\"check corporateName is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"CorporateName\")).to.eql(JSON.parse(responseBody).newCompany.corporateName)\r",
											"});\r",
											"\r",
											"//Cnpj\r",
											"    pm.test(\" check Cnpj is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Cnpj\")).to.eql(JSON.parse(responseBody).newCompany.registerCompany)\r",
											"\r",
											"});\r",
											"\r",
											"//MailCompany\r",
											"pm.test(\" check MailCompany is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"MailCompany\")).to.eql(JSON.parse(responseBody).newCompany.mail)\r",
											"\r",
											"});\r",
											"\r",
											"//Matriz\r",
											"pm.test(\" check Matriz is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Matriz\")).to.eql(JSON.parse(responseBody).newCompany.matriz)\r",
											"\r",
											"});\r",
											"\r",
											"//responsibleContact - Contact\r",
											"pm.test(\" check Contact is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Contact\")).to.eql(JSON.parse(responseBody).newCompany.responsibleContact)\r",
											"\r",
											"});\r",
											"\r",
											"//Telephone\r",
											"pm.test(\" check Telephone is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Telephone\")).to.eql(JSON.parse(responseBody).newCompany.telephone)\r",
											"\r",
											"});\r",
											"\r",
											"//ServiceDescription - Service\r",
											" pm.test(\"check Service is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Service\")).to.eql(JSON.parse(responseBody).newCompany.serviceDescription)   \r",
											"\r",
											"});\r",
											"\r",
											"//zipCode - Cep\r",
											"  pm.test(\" check Cep is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Cep\")).to.eql(JSON.parse(responseBody).newCompany.address[0].zipCode)\r",
											"\r",
											"});\r",
											"\r",
											"// city - City\r",
											"pm.test(\"check City is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"City\")).to.eql(JSON.parse(responseBody).newCompany.address[0].city)   \r",
											"\r",
											"});\r",
											"\r",
											"//state - State\r",
											"pm.test(\"check State is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"State\")).to.eql(JSON.parse(responseBody).newCompany.address[0].state)   \r",
											"\r",
											"});\r",
											"\r",
											"//district - District\r",
											"pm.test(\" check District is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"District\")).to.eql(JSON.parse(responseBody).newCompany.address[0].district)   \r",
											"\r",
											"});\r",
											"\r",
											"//street - Street\r",
											"pm.test(\"check Street is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Street\")).to.eql(JSON.parse(responseBody).newCompany.address[0].street)   \r",
											"\r",
											"});\r",
											"\r",
											"//number - Number\r",
											"pm.test(\"check Number is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Number\")).to.eql(JSON.parse(responseBody).newCompany.address[0].number)   \r",
											"\r",
											"});\r",
											"\r",
											"//complement - Complement\r",
											"pm.test(\"check Complement is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Complement\")).to.eql(JSON.parse(responseBody).newCompany.address[0].complement)   \r",
											"\r",
											"});\r",
											"\r",
											"//country -Country\r",
											"pm.test(\"check Country is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Country\")).to.eql(JSON.parse(responseBody).newCompany.address[0].country)   \r",
											"\r",
											"});\r",
											"\r",
											"//Setar Id Edit Company\r",
											"pm.environment.set(\"IdCompany\",JSON.parse(responseBody).newCompany._id)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company - Sucess Case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Corporate Name/Nome da Empresa\r",
											" pm.test(\"check corporateName is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"CorporateName\")).to.eql(JSON.parse(responseBody).newCompany.corporateName)\r",
											"});\r",
											"\r",
											"//Cnpj\r",
											"    pm.test(\" check Cnpj is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Cnpj\")).to.eql(JSON.parse(responseBody).newCompany.registerCompany)\r",
											"\r",
											"});\r",
											"\r",
											"//MailCompany\r",
											"pm.test(\" check MailCompany is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"MailCompany\")).to.eql(JSON.parse(responseBody).newCompany.mail)\r",
											"\r",
											"});\r",
											"\r",
											"//Matriz\r",
											"pm.test(\" check Matriz is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Matriz\")).to.eql(JSON.parse(responseBody).newCompany.matriz)\r",
											"\r",
											"});\r",
											"\r",
											"//responsibleContact - Contact\r",
											"pm.test(\" check Contact is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Contact\")).to.eql(JSON.parse(responseBody).newCompany.responsibleContact)\r",
											"\r",
											"});\r",
											"\r",
											"//Telephone\r",
											"pm.test(\" check Telephone is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Telephone\")).to.eql(JSON.parse(responseBody).newCompany.telephone)\r",
											"\r",
											"});\r",
											"\r",
											"//ServiceDescription - Service\r",
											" pm.test(\"check Service is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Service\")).to.eql(JSON.parse(responseBody).newCompany.serviceDescription)   \r",
											"\r",
											"});\r",
											"\r",
											"//zipCode - Cep\r",
											"  pm.test(\" check Cep is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Cep\")).to.eql(JSON.parse(responseBody).newCompany.address[0].zipCode)\r",
											"\r",
											"});\r",
											"\r",
											"// city - City\r",
											"pm.test(\"check City is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"City\")).to.eql(JSON.parse(responseBody).newCompany.address[0].city)   \r",
											"\r",
											"});\r",
											"\r",
											"//state - State\r",
											"pm.test(\"check State is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"State\")).to.eql(JSON.parse(responseBody).newCompany.address[0].state)   \r",
											"\r",
											"});\r",
											"\r",
											"//district - District\r",
											"pm.test(\" check District is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"District\")).to.eql(JSON.parse(responseBody).newCompany.address[0].district)   \r",
											"\r",
											"});\r",
											"\r",
											"//street - Street\r",
											"pm.test(\"check Street is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Street\")).to.eql(JSON.parse(responseBody).newCompany.address[0].street)   \r",
											"\r",
											"});\r",
											"\r",
											"//number - Number\r",
											"pm.test(\"check Number is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Number\")).to.eql(JSON.parse(responseBody).newCompany.address[0].number)   \r",
											"\r",
											"});\r",
											"\r",
											"//complement - Complement\r",
											"pm.test(\"check Complement is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Complement\")).to.eql(JSON.parse(responseBody).newCompany.address[0].complement)   \r",
											"\r",
											"});\r",
											"\r",
											"//country -Country\r",
											"pm.test(\"check Country is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"Country\")).to.eql(JSON.parse(responseBody).newCompany.address[0].country)   \r",
											"\r",
											"});\r",
											"\r",
											"//Setar Id Edit Company\r",
											"pm.environment.set(\"IdCompany\",JSON.parse(responseBody).newCompany._id)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Register - New Company -  Non-functional - Name",
					"item": [
						{
							"name": "Register - New Company  - Company Name is mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Corporate Name\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'Nome da empresa' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name Alphanumeric - Just Letters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Corporate Name\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'Nome da empresa' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"Luna Star\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name Alphanumeric - Just Letters Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Função para gerar o nome da empresa só com números\r",
											"pm.environment.set(\"CorporateReason\", pm.variables.replaceIn('{{$randomCompanyName}}'+' '+'{{$randomCompanySuffix}}' + ' ' + '{{$randomAlphaNumeric}}') );;\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateReason}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name Alphanumeric - Just Numbers Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Função para gerar nome da empresa só com números\r",
											"pm.environment.set(\"CompanyName\", pm.variables.replaceIn('{{$randomInt}}') );\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name Alphanumeric - Special Characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Special Characters\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo 'Nome da empresa' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"*/$ %*/*@\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name Alphanumeric - 100 Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Maximun 100 Characters\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 100 Characters\r",
											"// Função para gerar uma string alfanumérica aleatória com o comprimento desejado\r",
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Gerar uma variável com 101 caracteres alfanuméricos\r",
											"const corporateName = generateRandomString(101);\r",
											"\r",
											"// Definir a variável no ambiente do Postman\r",
											"pm.environment.set(\"CorporateName\", corporateName);\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - Company Name -  No Duplicity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//No duplicity\r",
											"pm.test(\"check error is True\", function () {\r",
											"    //pm.expect(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\").to.eql(JSON.parse(//responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// 100 Characters\r",
											"// Função para gerar uma string alfanumérica aleatória com o comprimento desejado\r",
											"function generateRandomString(length) {\r",
											"    const characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Gerar uma variável com 101 caracteres alfanuméricos\r",
											"const corporateName = generateRandomString(101);\r",
											"\r",
											"// Definir a variável no ambiente do Postman\r",
											"pm.environment.set(\"CorporateName\", corporateName);\r",
											"\r",
											"//Não preencher o campo CNPJ na pré req\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"Corp8 Tour\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Register - New Company -  Non-functional - CNPJ",
					"item": [
						{
							"name": "Register - New Company  - CNPJ is mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//Corporate Name\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'CNPJ' da empresa é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - CNPJ - Alphanumeric - Just Numbers [Manual]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// CNPJ Manual\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//CNPJ\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'CNPJ' da empresa deve conter apenas números.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"1234567abcdefg\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - CNPJ - Alphanumeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// CNPJ Alphanumeric\r",
											"function generateRandomLetters(length) {\r",
											"    var charset = \"ABCDEFGH11345IJKLMNOPQRSTUVWXYZ\";\r",
											"    var result = \"\";\r",
											"    for (var i = 0; i < length; i++) {\r",
											"        var randomIndex = Math.floor(Math.random() * charset.length);\r",
											"        result += charset.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Exemplo: gerar uma string de 14 caracteres alfabéticos\r",
											"var randomLetters = generateRandomLetters(14);\r",
											"\r",
											"// Armazenar o resultado no ambiente do Postman\r",
											"pm.environment.set(\"CnpjAlphanumeric\", randomLetters);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//CNPJ\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'CNPJ' da empresa deve conter apenas números.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"{{CnpjAlphanumeric}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - New Company  - CNPJ -  No Duplicity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"//No duplicity\r",
											"pm.test(\"check error is True\", function () {\r",
											"    //pm.expect(\"Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\").to.eql(JSON.parse(//responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//Não preencher o campo CNPJ na pré req\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"77040344123153\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Registration List [GET]",
					"item": [
						{
							"name": "Registration List",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List - [CorporateName]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company?corporateName=Inovare6 Rocha",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company"
									],
									"query": [
										{
											"key": "corporateName",
											"value": "Inovare6 Rocha"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List - [City]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company?city=Campinas",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company"
									],
									"query": [
										{
											"key": "city",
											"value": "Campinas"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List Count",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/count",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Edit Company [PUT]",
					"item": [
						{
							"name": "Edit Company",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{CorporateName}}\",\r\n  \"registerCompany\": \"{{Cnpj}}\",\r\n  \"mail\": \"{{MailCompany}}\",\r\n  \"matriz\": \"{{Matriz}}\",\r\n  \"responsibleContact\": \"{{Contact}}\",\r\n  \"telephone\": \"{{Telephone}}\",\r\n  \"serviceDescription\": \"{{Service}}\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Company - Adress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{Cep}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"{{Complement}}\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/address/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Company - Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/status/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete Company",
					"item": [
						{
							"name": "Delete Company",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Atualizar Status [após exclusão]",
					"item": [
						{
							"name": "Edit Company - Status [após exclusão]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"CorporateName\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Função para gerar um CNPJ \r",
											"function generateCnpj() {\r",
											"    let cnpjBase = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        cnpjBase += Math.floor(Math.random() * 10);\r",
											"    }\r",
											"\r",
											"    const digito1 = calcularDigitoVerificador(cnpjBase, 5);\r",
											"    const digito2 = calcularDigitoVerificador(cnpjBase + digito1, 6);\r",
											"\r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											"\r",
											"// Função para calcular o dígito verificador\r",
											"function calcularDigitoVerificador(base, multiplicador) {\r",
											"    let total = 0;\r",
											"    for (let i = 0; i < base.length; i++) {\r",
											"        total += parseInt(base[i]) * multiplicador;\r",
											"        multiplicador = multiplicador === 2 ? 9 : multiplicador - 1;\r",
											"    }\r",
											"\r",
											"    const resto = total % 11;\r",
											"    const digito = resto < 2 ? 0 : 11 - resto;\r",
											"\r",
											"    return digito.toString();\r",
											"}\r",
											"\r",
											"// Função para verificar se um CNPJ já existe na variável de ambiente\r",
											"function isCnpjExists(cnpj) {\r",
											"    const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"    return cnpjsExistem.includes(cnpj);\r",
											"}\r",
											"\r",
											"// Gere um CNPJ único\r",
											"let Cnpj = generateCnpj();\r",
											"\r",
											"// Verifique se o CNPJ já existe, gere novamente até ser único\r",
											"while (isCnpjExists(Cnpj)) {\r",
											"    Cnpj = generateCnpj();\r",
											"}\r",
											"\r",
											"// Adicione o CNPJ gerado à variável de ambiente\r",
											"const cnpjsExistem = pm.environment.get(\"cnpjsExistem\") || [];\r",
											"cnpjsExistem.push(Cnpj);\r",
											"pm.environment.set(\"cnpjsExistem\", cnpjsExistem);\r",
											"\r",
											"// Defina o valor do CNPJ gerado como uma variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"Cnpj\", Cnpj);\r",
											"\r",
											"// Você também pode imprimir o CNPJ gerado para visualização no console\r",
											"console.log(\"Cnpj Gerado:\", Cnpj);\r",
											"\r",
											"\r",
											"\r",
											"//Email\r",
											"function domainCompany(){\r",
											"    var domainCompany = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@uol.com.br\"];\r",
											"    var radomItem = domainCompany[Math.floor(Math.random() * domainCompany.length)]\r",
											"    return radomItem;\r",
											"}\r",
											"\r",
											"pm.variables.set(\"DomainCompany\", domainCompany());\r",
											"console.log(domainCompany())\r",
											"\r",
											"function mailCompany(){\r",
											"    var mailCompany = pm.variables.get(\"FirstNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"LastNameCompany\").toLowerCase().replace(\" \", \"\")+pm.variables.get(\"DomainCompany\");\r",
											"    return mailCompany;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"MailCompany\", mailCompany())\r",
											"\r",
											"\r",
											"\r",
											"//Matriz - Verificar\r",
											"//Corporate Name - Nome da Empresa\r",
											"function firstNameCompany(){\r",
											"    \r",
											"    var firstNameCompany = [ \"LG2\",\"Auto7\",\"Inova4\",\"Inovare6\",\"Vita2\",\"Mix3\",\"Luna4\",\"Criativa6\",\"FZK5\",\"LDK2\",\"Onda8\",\"Power1\",\"Max32\",\"Levo6\",\"Lika4\",\"You2\",\"Dream7\",\"Share3\",\"Wiki4\",\"Lila6\",\"Quali6\",\"Corp8\",\"Style1\",\"Fashion5\",\"Dna9\",\"Vip1\",\"Confort8\",\"Gold7\",\"Magic4\",\"Ultra3\",\"Domos6\",\"Sky1\",\"Clic6\",\"Choco1\",\"ALM4\",\"CDC4\",\"Priva6\",\"Laka2\",\"Mara8\",\"Seta6\"];\r",
											"\r",
											"    var randomItem = firstNameCompany[Math.floor(Math.random() * firstNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstNameCompany\", firstNameCompany());\r",
											"\r",
											"function lastNameCompany(){\r",
											"        \r",
											"    var lastNameCompany = [\"Zuk\",\"Choice\",\"Choco\",\"Silver\",\"Star\",\"ME\",\"EPP\",\"Ltda\",\"Spot\",\"Luz\",\"Glow\",\"Show\",\"Lab\",\"Now\",\"Loop\",\"Keep\",\"Ideal\",\"Leal\",\"Total\",\"Tour\",\"Mansur\",\"Best\",\"Cap\",\"Baby\",\"Titanium\",\"Millen\",\"Pump\",\"Express\",\"Dux\",\"Castor\",\"Comercial\",\"Rocha\",\"Basics\",\"Plus\",\"Digi\",\"Ponto\",\"Blue\",\"Up \",\"Moraes\",\"Genix\"];\r",
											"    \r",
											"    var randomItem = lastNameCompany[Math.floor(Math.random() * lastNameCompany.length)];\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"LastNameCompany\", lastNameCompany());\r",
											"\r",
											"pm.environment.set(\"Matriz\", pm.variables.get(\"FirstNameCompany\")+ \" \" +pm.variables.get(\"LastNameCompany\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"// responsibleContact - Nome de contato\r",
											"// Lista de nomes de contato\r",
											"var nomesContatos = ['João', 'Maria', 'Carlos', 'Ana', 'Pedro', 'Lúcia', 'Fernando', 'Mariana', 'Ricardo', 'Isabel', 'Paulo', 'Juliana', 'Roberto', 'Sofia', 'Lucas', 'Camila', 'Diego', 'Eduarda', 'André', 'Clara', 'Felipe', 'Gabriela', 'Hugo', 'Laura', 'Igor', 'Letícia', 'José', 'Raquel', 'Marcelo', 'Natalia', 'Thiago', 'Valentina', 'Vitor', 'Yasmin', 'Zé', 'Luiza', 'Renato', 'Bianca','Telma', 'Leila'];\r",
											"\r",
											"// Definir a variável 'contato' com um nome aleatório\r",
											"pm.environment.set('Contact', nomesContatos[Math.floor(Math.random() * nomesContatos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//Telephone\r",
											"// Função para gerar números de telefone com 14 dígitos\r",
											"function generatePhoneNumber() {\r",
											"    var phoneNumber = '1'; // Começa com o dígito 1\r",
											"\r",
											"    // Adiciona 13 dígitos aleatórios\r",
											"    for (var i = 0; i < 13; i++) {\r",
											"        phoneNumber += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao número de telefone\r",
											"    }\r",
											"\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definir a variável 'Telephone' com um número de telefone com 14 dígitos\r",
											"pm.environment.set('Telephone', generatePhoneNumber());\r",
											"\r",
											"//Service Description\r",
											"// Lista de descrições de serviços\r",
											"var descricoesServicos = [\r",
											"    'TI','Web','Redes', 'Design', 'Gráfica', 'Suporte', 'Projetos', 'Treinamento',    'Marketing', 'Auditoria', 'Mecânica', 'E-commerce', 'Consultoria ','Roupas',    'Calçados', 'Festas', 'Esporte', 'Vídeo'\r",
											"    \r",
											"];\r",
											"\r",
											"pm.environment.set('Service', descricoesServicos[Math.floor(Math.random() * descricoesServicos.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//ZipCode - CEP\r",
											"// Função para gerar CEP aleatório no formato brasileiro\r",
											"function generateCEP() {\r",
											"    var cep = '';\r",
											"\r",
											"    for (var i = 0; i < 8; i++) {\r",
											"        cep += Math.floor(Math.random() * 10); // Gera um dígito aleatório e adiciona ao CEP\r",
											"        \r",
											"    }\r",
											"\r",
											"    return cep;\r",
											"}\r",
											"\r",
											"pm.environment.set('Cep', generateCEP());\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// City - Cidade\r",
											"// Lista de cidades brasileiras\r",
											"var cidadesBrasileiras = [\r",
											"    'São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador',\r",
											"    'Curitiba', 'Recife', 'Fortaleza', 'Manaus', 'Brasília', 'Belém', 'Goiânia',\r",
											"    'Campinas', 'Vitória', 'Florianópolis', 'João Pessoa', 'Natal', 'Campo Grande',\r",
											"    'Teresina', 'Maceió', 'Aracaju', 'Cuiabá', 'Porto Velho', 'Boa Vista',\r",
											"    'Palmas', 'Macapá', 'Rio Branco', 'São Luís', 'Anápolis', 'Joinville',\r",
											"    'Sorocaba', 'Uberlândia', 'Feira de Santana', 'Ribeirão Preto', 'Campina Grande',\r",
											"    'Montes Claros', 'São José do Rio Preto', 'São José dos Campos', 'Pelotas',\r",
											"    'Juazeiro do Norte', 'Mossoró'\r",
											"];\r",
											"\r",
											"// Função para gerar uma cidade aleatória do Brasil\r",
											"function generateRandomCity() {\r",
											"    return cidadesBrasileiras[Math.floor(Math.random() * cidadesBrasileiras.length)];\r",
											"}\r",
											"\r",
											"pm.environment.set('City', generateRandomCity());\r",
											"\r",
											"\r",
											"// Lista de estados brasileiros com duas letras\r",
											"const estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\r",
											"\r",
											"// Seleciona aleatoriamente um estado\r",
											"pm.environment.set(\"State\", estados[Math.floor(Math.random() * estados.length)]);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//district - Street - Rua\r",
											"function generateRandomStreetName() {\r",
											"    const prefixos = [\"Rua\", \"Avenida\", \"Alameda\", \"Travessa\", \"Praça\"];\r",
											"    const nomes = [\"Flor\", \"Sol\", \"Luz\", \"Monte\", \"Rio\", \"Mar\", \"Céu\", \"Serra\", \"Vale\", \"Verde\", \"Azul\", \"Canoa\", \"Brisa\", \"Cachoeira\", \"Jardim\", \"Sombra\", \"Ponte\", \"Estrela\"];\r",
											"\r",
											"    const prefixo = prefixos[Math.floor(Math.random() * prefixos.length)];\r",
											"    const nome = nomes[Math.floor(Math.random() * nomes.length)];\r",
											"\r",
											"    return `${prefixo} ${nome}`;\r",
											"}\r",
											"\r",
											"// Exemplo de uso\r",
											"const nomeDeRuaAleatorio = generateRandomStreetName();\r",
											"console.log(\"Nome de Rua Aleatório\", nomeDeRuaAleatorio);\r",
											"\r",
											"\r",
											"\r",
											"//District - Bairro\r",
											"function District() {\r",
											"    var district = [\r",
											"        \"Tucuruvi\", \"Jabaquara\", \"Lapa\", \"Ipanema\", \"Cabral\", \"Lageado\",\r",
											"        \"Pirituba\", \"Copacabana\", \"Morumbi\", \"Abranches\", \"Boa Vista\", \"Espinheira\",\r",
											"        \"Leblon\", \"Campeche\", \"Boqueirão\", \"Ponta Negra\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um distrito\r",
											"    const districtAleatorio = district[Math.floor(Math.random() * district.length)];\r",
											"\r",
											"    // Remove acentos do distrito aleatório\r",
											"    const districtSemAcentos = removeAccents(districtAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"District\" com o distrito sem acentos\r",
											"    pm.environment.set(\"District\", districtSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"\r",
											"// Chama a função\r",
											"District();\r",
											"\r",
											"//Street - Rua\r",
											"pm.environment.set(\"Street\", pm.variables.replaceIn('{{$randomStreetName}}'));\r",
											"  \r",
											"\r",
											"\r",
											"\r",
											"//Number\r",
											"pm.environment.set(\"Number\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"\r",
											"\r",
											"//Complement\r",
											"function Complement() {\r",
											"    var complement = [\r",
											"        \"de 250 ao fim - lado ímpar\", \"lado par\", \"Apartamento 35\", \"Bloco A\", \"Casa 2\", \"Lote 245\",\r",
											"        \"Condominio Laranjeiras\", \"Apartamento 38\", \"Bloco B\", \"Bloco C\", \"Bloco D\", \"Bloco E\",\r",
											"        \"Apartamento 101\", \"Apartamento 215\", \"Casa 2\", \"Lote 68\"\r",
											"    ];\r",
											"\r",
											"    // Seleciona aleatoriamente um complemento\r",
											"    const complementoAleatorio = complement[Math.floor(Math.random() * complement.length)];\r",
											"\r",
											"    // Remove acentos do complemento aleatório\r",
											"    const complementoSemAcentos = removeAccents(complementoAleatorio);\r",
											"\r",
											"    // Define a variável de ambiente \"Complement\" com o complemento sem acentos\r",
											"    pm.environment.set(\"Complement\", complementoSemAcentos);\r",
											"\r",
											"    function removeAccents(str) {\r",
											"        return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"    }\r",
											"}\r",
											"// Chama a função\r",
											"Complement();\r",
											"\r",
											"\r",
											"//Country - País\r",
											"// Função para gerar um país aleatório\r",
											"function generateRandomCountry() {\r",
											"    const paises = [\"Brasil\", \"Estados Unidos\", \"França\", \"Japão\", \"Austrália\", \"Holanda\", \"Costa do Marfim\"];\r",
											"\r",
											"    // Seleciona aleatoriamente um país\r",
											"    const paisAleatorio = paises[Math.floor(Math.random() * paises.length)];\r",
											"\r",
											"    return paisAleatorio;\r",
											"}\r",
											"\r",
											"// Chama a função e define o país na variável de ambiente \"Country\"\r",
											"pm.environment.set(\"Country\", generateRandomCountry());\r",
											"\r",
											"// Exibe o país aleatório no console do Postman (opcional)\r",
											"console.log(\"País Aleatório:\", pm.environment.get(\"Country\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/company/status/{{IdCompany}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Board",
			"item": [
				{
					"name": "Include board name [POST]",
					"item": [
						{
							"name": "Include board name - Sucess Case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"//Nome Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"//BoardName\r",
											" pm.test(\"check boardName is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"BoardName\")).to.eql(JSON.parse(responseBody).newBoard.boardName)\r",
											"});\r",
											"\r",
											"\r",
											"//Setar Id Board - IdBoard\r",
											"pm.environment.set(\"IdBoard\",JSON.parse(responseBody).newBoard._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Include board name - Non functional",
					"item": [
						{
							"name": "Board name is mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//BoardName\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'diretoria' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"//Nome Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Board name - Just Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//BoardName\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'diretoria' só pode conter letras e o caractere especial '&'.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Função para gerar o nome da empresa só com números\r",
											"pm.environment.set(\"BoardName\", pm.variables.replaceIn('{{$randomBoardName}}'+' '+'{{$randomCompanySuffix}}' + ' ' + '{{$randomAlphaNumeric}}') );;\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}} \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Board name - Just 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Máximun 50 Characters. Criado com 51.\r",
											"pm.test(\"check error is True\", function () {\r",
											"    pm.expect(\"O campo 'diretoria' deve possuir no máximo 50 caracteres.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Função para gerar uma string com 51 letras aleatórias\r",
											"function gerarStringComLetras() {\r",
											"    var letras = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    var resultado = '';\r",
											"\r",
											"    for (var i = 0; i < 51; i++) {\r",
											"        var indiceAleatorio = Math.floor(Math.random() * letras.length);\r",
											"        resultado += letras.charAt(indiceAleatorio);\r",
											"    }\r",
											"\r",
											"    return resultado;\r",
											"}\r",
											"\r",
											"// Chama a função para gerar uma string com 51 letras\r",
											"var novaString = gerarStringComLetras();\r",
											"\r",
											"// Atribui a variável `novaString` à variável de ambiente 'BoardName'\r",
											"pm.environment.set('BoardName', novaString);\r",
											"\r",
											"// Imprime a nova string no console para verificação\r",
											"console.log(\"Nova String: \" + novaString);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}} \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Board name - No duplicity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"Desigh&Z \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Include Board code - Non functional",
					"item": [
						{
							"name": "Include board code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//BoardName\r",
											" pm.test(\"check boardName is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"BoardName\")).to.eql(JSON.parse(responseBody).newBoard.boardName)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"//BoardName - Nome da Diretoria\r",
											"pm.environment.set(\"BoardCode\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}}\",\r\n  \"boardCode\": \"{{BoardCode}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Include board code - no number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//BoardName\r",
											" pm.test(\"check boardName is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"BoardName\")).to.eql(JSON.parse(responseBody).newBoard.boardName)\r",
											"});\r",
											"\r",
											"\r",
											"//BoardCode\r",
											"pm.test(\"check boardCode is True\", function () {\r",
											"        pm.expect(pm.variables.get(\"BoardCode\")).to.eql(JSON.parse(responseBody).newBoard.boardCode)\r",
											"\r",
											"});\r",
											"\r",
											"//BoardCode\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"O campo 'diretoria' é obrigatório.\").to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Board Name \r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"//Board Code\r",
											"pm.environment.set(\"BoardCode\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}}\",\r\n  \"boardCode\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Edit Board [ PUT]",
					"item": [
						{
							"name": "Edit board name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"//Nome Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/{{IdBoard}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										"{{IdBoard}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Registration List [GET]",
					"item": [
						{
							"name": "Registration List",
							"item": [],
							"auth": {
								"type": "apikey",
								"apikey": [
									{
										"key": "in",
										"value": "query",
										"type": "string"
									},
									{
										"key": "value",
										"value": "{{Token}}",
										"type": "string"
									},
									{
										"key": "key",
										"value": "token",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Registration List - Baord -  Count",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"//Nome Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/count",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List - Baord Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/{{IdBoard}}",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										"{{IdBoard}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration List - Baord",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//BoardName - Nome da Diretoria\r",
											"//Nome Diretoria\r",
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comunicação\",\"Produção\",\"Qualidade\",\"Financeiro\", \"Administrativo\", \"Controladoria\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&A\",\"&B\",\"&C\",\"&D\",\"&E\",\"&F\",\"&G\",\"&H\",\"&I\",\"&J\",\"&k\",\"&l\",\"&M\",\"&N\",\"&O\",\"&P\",\"&Q\",\"&R\",\"&S\",\"&T\",\"&U\",\"&V\",\"&X\",\"&Y\",\"&Z\",];\r",
											"\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"BoardName\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));\r",
											"\r",
											"function removeAccents(str) {\r",
											"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"boardName\": \"{{BoardName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/board/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"board",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cost Center",
			"item": [
				{
					"name": "Include  Cost Center [POST]",
					"item": [
						{
							"name": "Include  Cost Center - Sucess Case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"check alert is True\", function () {\r",
											"    pm.expect( \"Cadastro realizado com sucesso.\").to.eql(JSON.parse(responseBody).msg)\r",
											"});\r",
											"\r",
											"pm.test(\"check costCentername is True\", \r",
											"   function () {\r",
											"    pm.expect(pm.variables.get(\"CostCentername\")).to.eql(JSON.parse(responseBody).newCostCenter.costCenterName)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"IdCostCenter\",JSON.parse(responseBody).newCostCenter._id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName(){\r",
											"   \r",
											"    var firstName = [\"Engenharia\",\"Treinamento\",\"Infraestrutura\",\"Importação\",\"Exportação\",\"Operações\",\"Tecnologia\",\"Desenvolvimento\",\"Marketing\",\"Desigh\",\"Pesquisa\",\"Comumicação\",\"Produção\",\"Qualidade\",\"Digital\"];\r",
											"   \r",
											"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
											"   \r",
											"    console.log(randomItem)\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"function lastName(){\r",
											"\r",
											"    var lastName = [\"&AA\",\"&BAA\",\"&CAA\",\"&DAA\",\"&EAA\",\"&FAA\",\"&GAA\",\"&HAA\",\"&IAA\",\"&JAA\",\"&kAA\",\"&lAA\",\"&MAA\",\"&NAA\",\"&OAA\",\"&PAA\",\"&QA\",\"&RAA\",\"&SAA\",\"&AAT\",\"&UAA\",\"&VAAA\",\"&XAA\",\"&YAA\",\"&ZAA\"];\r",
											"\r",
											"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
											"   \r",
											"       console.log(randomItem)\r",
											"\r",
											"    return randomItem;\r",
											"}\r",
											"\r",
											"    pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"    pm.environment.set(\"CostCentername\",pm.variables.get(\"FirstName\") + pm.variables.get(\"LastName\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"costCenterName\":\"{{CostCentername}}\",\r\n    \"boardId\":\"{{IdBoard}}\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url swagger}}/api/costCenter/",
									"host": [
										"{{url swagger}}"
									],
									"path": [
										"api",
										"costCenter",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "in",
								"value": "query",
								"type": "string"
							},
							{
								"key": "value",
								"value": "{{Token}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}